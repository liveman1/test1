let commentsSubmitResponse = false;
let commentModule;
document.documentElement.setAttribute('ontouchmove', 'ontouchmove');
addEventListener("DOMContentLoaded", (event) => {

    if(document.getElementsByClassName('ywContextModal').length > 0){

        for(var i = 0; i < document.getElementsByClassName('ywContextModal').length; i++){
            document.getElementsByClassName('ywContextModal')[i].addEventListener(
              "click",
            (event) => {

                var x = event.target;
                // Let's grab "TYPO3 Slug" for clicked-button
                const slug = x.getAttribute('id');

	// Let's grab the modal identifier (last class item)
	const modalIdent = x.getAttribute('modalIdent');  
        console.log(modalIdent);

                // Let's grab "TYPO3 colpos" specified in button
                const colpos = x.getAttribute('menuItem');

                

                // Let's grab url with entrypoints
		const href = window.location.href;
		const entryPointString = href.split("/").pop();
		const entryPoint = entryPointString.slice(0,2);

       // Prepare AJAX request + Pass to TypoScript with TypeNum & colpos
        const getUrl = `${entryPoint}/${slug}?type=990&colpos=${colpos}`;
        fetch(getUrl, {
          method: 'GET',
        }).then((res) => res.text()).then((res) => {
						
          const parser = new DOMParser();
          const htmlDoc = parser.parseFromString(res, 'text/html');

          // identify modal
          // get modal button
          const modalButton = document.querySelector(`.${modalIdent}`);
          // identify modal id
          const modalTarget = modalButton.getAttribute('data-bs-target');
          // identify modal
          const modalElement = document.querySelector(modalTarget);
          const modalBody = modalElement.querySelector('.modal-body');
          const modalHeader = modalElement.querySelector('.modal-header h2');
          
// Render Page Title to Modalbox
          //if(htmlDoc.querySelector('.pageTitle')){
          //  modalHeader.innerText = htmlDoc.querySelector('.pageTitle').innerText;
          //}
          modalBody.innerHTML = '';
          //if(document.getElementById("btn-minimize")){
          //  document.getElementById("btn-minimize").style.display = "none";
          //}
          // Render page content selected on colpos
          if(htmlDoc.querySelector('.pageContent')){
            modalBody.appendChild(htmlDoc.querySelector('.pageContent'));
          }




                        // load Swiper container
                        const initializedSwiper = document.querySelector('.contextSwiper');
                        if(initializedSwiper){
                            loadSwiper(initializedSwiper);
                        }

                        const anotherModal = modalBody.querySelectorAll('button');
                        if(anotherModal){
                            loadAnotherModal(anotherModal, modalIdent);
                        }
	  const contextModal = new bootstrap.Modal(document.querySelector(modalTarget));
          contextModal.show();

                    });
                
            });
        }
    }
});

function loadAnotherModal(anotherModal, contextModal){
    for(var j = 0; j < anotherModal.length; j++) {
        const buttons = anotherModal.item(j);
        buttons.addEventListener('click', function (e) {
            var p = e.target;
            //contextModal.hide();
            const modalContentPayment = p.getAttribute('paymentModal');
            if(modalContentPayment === 'ymPayment'){
                // Let's grab "TYPO3 Slug" for clicked-button
                const slugPayment = p.getAttribute('id');

                // Let's grab "TYPO3 colpos" specified in button
                const colposPayment = p.getAttribute('menuItem');

                // Let's grab url with entrypoints
                const href = window.location.href;
                const entryPoint = href.split("/").pop();

                // Prepare AJAX request + Pass to TypoScript with TypeNum & colpos
                const getUrl = `${entryPoint}/${slugPayment}?type=990&colpos=${colposPayment}`;
                fetch(getUrl, {
                    method: 'GET',
                }).then((res) => res.text()).then((res) => {

                    const parser = new DOMParser();
                    const htmlDocs = parser.parseFromString(res, 'text/html');

                    const modal = document.querySelector(`.${modalContentPayment}`);
                    const paymentBody = modal.querySelector('.modal-body');
                    const paymentHeader = modal.querySelector('.modal-header h2');


                    const paymentModal = new bootstrap.Modal(document.querySelector(`.${modalContentPayment}`));
                    paymentModal.show();
                    paymentHeader.innerHTML = '';
                    // // Render Page Title to Modalbox
                    if(htmlDocs.querySelector('.pageTitle')){
                        paymentHeader.innerText = htmlDocs.querySelector('.pageTitle').innerText;
                    }
                    paymentBody.innerHTML = '';

                    // Render page content selected on colpos
                    if(htmlDocs.querySelector('.pageContent')){
                        paymentBody.appendChild(htmlDocs.querySelector('.pageContent'));
                    }


                    if(window.location.href.includes('?redirect')){
                        document.querySelector('.modal').addEventListener('hide.bs.modal', function (event) {
                            // Your code here
                            var urlWithoutParams = window.location.href.split('?')[0];
                            window.location.href = urlWithoutParams;
                        });
                        paymentModal.hide();
                    }

                    // load Swiper container
                    const paymentSwiperDiv = document.querySelector('.paymentSwiper');
                    if(paymentSwiperDiv){
                        loadSwiper(paymentSwiperDiv);
                    }

                    if(window.location.href.includes('?redirect')){
                        let paymentStatus = document.getElementById('paymentStatus');
                        let paymentRedirectUrl = window.location.href;
                        if(paymentRedirectUrl.search){
                            paymentRedirectUrl.search = '';
                            let payment = paymentRedirectUrl.split("?").pop();
                            if(paymentStatus){
                                paymentStatus.setAttribute('value', payment);
                                // Ajax Call for the updating the user
                                let updateUrl = paymentStatus.getAttribute('data-url');
                            }
                        }

                        // Tab shows the
                        let tab3 = document.querySelector("ul > li:nth-child(3)").children[0];
                        tab3.classList.add('active');
                        tab3.setAttribute("aria-selected", "true");


                        // Tab Content Shows
                        let tabContent3 = document.getElementsByClassName('tab-pane')[2];
                        tabContent3.classList.add('active');
                        tabContent3.classList.add('show');
                    }
                    else{
                        // Tab shows the
                        let tab1 = document.querySelector("ul > li:first-child").children[0];
                        tab1.classList.add('active');
                        tab1.setAttribute("aria-selected", "true");


                        // Tab Content Shows
                        let tabContent = document.getElementsByClassName('tab-pane')[0];
                        tabContent.classList.add('active');
                        tabContent.classList.add('show');
                    }

                });
            }
        });
    }
}


function loadSwiper(initializedSwiper){
    const spv = initializedSwiper.getAttribute('data-spv');
    const spb = initializedSwiper.getAttribute('data-spb');
    const spg = initializedSwiper.getAttribute('data-spg');
    const del = initializedSwiper.getAttribute('data-del');
    const b576 = initializedSwiper.getAttribute('data-b576');
    const b768 = initializedSwiper.getAttribute('data-b768');
    const b992 = initializedSwiper.getAttribute('data-b992');
    const lop = initializedSwiper.getAttribute('data-lop');
    const suid = initializedSwiper.getAttribute('data-suid');
    var pagination = initializedSwiper.getAttribute('data-pagination');
    var navigation = initializedSwiper.getAttribute('data-navigation');
    var swiperClass = initializedSwiper.getAttribute('data-swiperclass');

    if(parseInt(lop) === 0){
        var swiperContext = new Swiper('.'+ swiperClass, {
            slidesPerView: parseInt(spv),
            spaceBetween: parseInt(spb),
            slidesPerGroup: parseInt(spg),
            pagination: {
                el: '.swiper-pagination',
                type: 'bullets',
                clickable: true,
            },
            autoplay: {
                delay: parseInt(del),
            },
            navigation: {
                nextEl: '.swiper-button-next',
                prevEl: '.swiper-button-prev',
            },
            breakpoints: {
                10: {
                    slidesPerView: 1,
                },
                576: {
                    slidesPerView: parseInt(b576),
                },
                768: {
                    slidesPerView: parseInt(b768),
                },
                992: {
                    slidesPerView: parseInt(b992),
                },
            },
        });
    }
    else{
        var swiperContext = new Swiper('.'+ swiperClass, {
            slidesPerView: parseInt(spv),
            spaceBetween: parseInt(spb),
            slidesPerGroup: parseInt(spg),
            loop: true,
            pagination: {
                el: '.swiper-pagination',
                type: 'bullets',
                clickable: true,
            },
            autoplay: {
                delay: parseInt(del),
            },
            navigation: {
                nextEl: '.swiper-button-next',
                prevEl: '.swiper-button-prev',
            },
        });
    }
}

